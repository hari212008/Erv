#!/usr/bin/env python

# A sample training component that trains a simple scikit-learn decision tree model.
# This implementation works in File mode and makes no assumptions about the input file names.
# Input is specified as CSV with a data point in each row and the labels in the first column.

from __future__ import print_function

import os
import json
import pickle
import sys
import traceback
import numpy as np

import pandas as pd
from dataprocessing import data_preprocessing

from sklearn import tree
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestClassifier
from numpy import mean

# These are the paths to where SageMaker mounts interesting things in your container.

prefix = '/opt/ml/'


input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')


# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)

# The function to execute the training.
def train():
    print('Starting the training.')
    try:
        # Read in any hyperparameters that the user passed with the training job
        with open(param_path, 'r') as tc:
            trainingParams = json.load(tc)

        # Take the set of files and read them all into a single pandas dataframe
        print(training_path)
        input_files = [ os.path.join(training_path, file) for file in os.listdir(training_path) ]
        print(input_files)
 
        if len(input_files) == 0:
            raise ValueError(('There are no files in {}.\n' +
                              'This usually indicates that the channel ({}) was incorrectly specified,\n' +
                              'the data specification in S3 was incorrectly specified or the role specified\n' +
                              'does not have permission to access the data.').format(training_path, channel_name))
        print("reading files")                      
        #raw_data = [pd.read_csv(file) for file in input_files]
        #raw_data = pd.read_csv('/opt/ml/input/data/training/churn.csv')
        raw_data = pd.read_csv('/opt/ml/input/data/training/churn.csv')
        print(raw_data.head(1))
        churn = raw_data #pd.concat(raw_data)
        print('read file completed')
        
        print('Preprocessing starting')

        model_data = data_preprocessing(churn)
        print('Preprocessing completed')

        model_data = pd.concat([model_data['Churn?_True.'], model_data.drop(['Churn?_False.', 'Churn?_True.'], axis=1)], axis=1)
        train_data, validation_data, test_data = np.split(model_data.sample(frac=1, random_state=1729), [int(0.7 * len(model_data)), int(0.9 * len(model_data))])

        # labels are in the first column
        train_y = train_data.ix[:,0]
        train_X = train_data.ix[:,1:]
        print(train_data.columns.size)
        train_columns = pd.DataFrame(train_X.columns)
        train_columns.to_csv(os.path.join(model_path, "train_columns.csv"), index=False)
        
        clf = RandomForestClassifier(n_estimators=200, max_depth=15,
                             random_state=0)
       
        clf = clf.fit(train_X, train_y)

        # log a metric on performance of the model
        validation_accuracy = mean(cross_val_score(clf, train_X, train_y, cv=10))
        print('validation-accuracy: ' + str(validation_accuracy))

        # save the model
        with open(os.path.join(model_path, 'customerchurn-model.pkl'), 'w') as out:
            pickle.dump(clf, out)
        print('Training complete.')
    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
